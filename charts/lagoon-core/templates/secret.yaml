{{/*
This somewhat complex logic is intended to:
  * generate a random secret value automatically on chart install
  * not overwrite the randomly generated value on upgrade
  * allow overriding if the value is explicitly defined
  * check whether a legacy JWT secret exists and copy that
*/}}
{{- $legacyjwtExist := index (lookup "v1" "Secret" .Release.Namespace (print (include "lagoon-core.fullname" . ) "-jwtsecret")) "data" | default dict }}
{{- $secretsExist := index (lookup "v1" "Secret" .Release.Namespace (print (include "lagoon-core.fullname" . ) "-secrets")) "data" | default dict }}
{{- $jwtSecret := coalesce .Values.jwtSecret (index $secretsExist "JWTSECRET" | default "" | b64dec) (index $legacyjwtExist "JWTSECRET" | default "" | b64dec) (randAlpha 32) }}
{{- $projectSeed := coalesce .Values.projectSeed (index $secretsExist "PROJECTSEED" | default "" | b64dec) (index $legacyjwtExist "JWTSECRET" | default "" | b64dec) (randAlpha 32) }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ include "lagoon-core.fullname" . }}-secrets
  labels:
    {{- include "lagoon-core.labels" . | nindent 4 }}
stringData:
  JWTSECRET: {{ $jwtSecret | quote }}
  PROJECTSEED: {{ $projectSeed | quote }}
