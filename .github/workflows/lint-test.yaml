name: Lint and Test Charts

on: pull_request

jobs:
  # runs for all charts other than lagoon-test, which is excluded in
  # default.ct.yaml
  lint-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Fetch history
      run: git fetch --prune --unshallow

    - name: Run chart-testing (lint)
      id: lint
      uses: helm/chart-testing-action@v1.0.0
      with:
        image: smlx/chart-testing:v3.0.0-patch.2
        command: lint
        config: default.ct.yaml

    - name: Create kind cluster
      uses: helm/kind-action@v1.0.0
      if: steps.lint.outputs.changed == 'true'

    - name: Run chart-testing (install)
      uses: helm/chart-testing-action@v1.0.0
      with:
        image: smlx/chart-testing:v3.0.0-patch.2
        command: install
        config: default.ct.yaml

    - name: Show changed charts
      uses: helm/chart-testing-action@v1.0.0
      with:
        image: smlx/chart-testing:v3.0.0-patch.2
        command: list-changed
        config: default.ct.yaml

  # runs for lagoon-core, lagoon-remote, lagoon-test
  test-suite:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Fetch history
      run: git fetch --prune --unshallow

    - name: Run chart-testing (lint)
      id: lint
      uses: helm/chart-testing-action@v1.0.0
      with:
        image: smlx/chart-testing:v3.0.0-patch.2
        command: lint
        config: test-suite-lint.ct.yaml

    - name: Create kind cluster
      uses: helm/kind-action@v1.0.0
      if: steps.lint.outputs.changed == 'true'
      with:
        config: test-suite.kind-config.yaml

    - name: Install kubectl
      if: steps.lint.outputs.changed == 'true'
      run: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo cp ./kubectl /usr/local/bin/

    - name: Check node IP matches kind configuration
      if: steps.lint.outputs.changed == 'true'
      run: |
        NODE_IP="$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}')"
        echo Checking for NODE_IP "$NODE_IP"
        grep $NODE_IP test-suite.kind-config.yaml

    - name: Install Helm
      if: steps.lint.outputs.changed == 'true'
      run: |
        curl -fsSLo get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh

    - name: Add dependency chart repos
      if: steps.lint.outputs.changed == 'true'
      run: |
        helm repo add stable https://kubernetes-charts.storage.googleapis.com/
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

    - name: Install gojq
      if: steps.lint.outputs.changed == 'true'
      run: |
        curl -sSLO https://github.com/itchyny/gojq/releases/download/v0.11.1/gojq_v0.11.1_linux_amd64.tar.gz
        tar -xf ./gojq_v0.11.1_linux_amd64.tar.gz -C /tmp
        sudo cp /tmp/gojq_v0.11.1_linux_amd64/gojq /usr/local/bin/jq

    - name: Install cluster ingress and registry
      if: steps.lint.outputs.changed == 'true'
      run: |
        helm upgrade \
          --install \
          --create-namespace \
          --namespace ingress-nginx \
          --wait \
          --timeout 15m \
          --set controller.service.type=NodePort \
          --set controller.service.nodePorts.http=32080 \
          --set controller.service.nodePorts.https=32443 \
          --set controller.config.proxy-body-size=100m \
          ingress-nginx \
          ingress-nginx/ingress-nginx \
        && helm upgrade \
          --install \
          --create-namespace \
          --namespace registry \
          --wait \
          --timeout 15m \
          --set ingress.enabled=true \
          --set "ingress.hosts={registry.$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}').nip.io}" \
          --set "ingress.annotations.kubernetes\.io\/ingress\.class=nginx" \
          --set "ingress.annotations.nginx\.ingress\.kubernetes\.io\/proxy-body-size=0" \
          registry \
          stable/docker-registry

    - name: Install lagoon-core and lagoon-remote charts
      if: steps.lint.outputs.changed == 'true'
      run: |
        helm upgrade \
          --install \
          --create-namespace \
          --namespace lagoon \
          --wait \
          --timeout 15m \
          --values ./charts/lagoon-core/ci/linter-values.yaml \
          --set autoIdler.enabled=false \
          --set drushAlias.enabled=true \
          --set logs2email.enabled=false \
          --set logs2microsoftteams.enabled=false \
          --set logs2rocketchat.enabled=false \
          --set logs2slack.enabled=false \
          --set logsDBCurator.enabled=false \
          --set "registry=registry.$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}').nip.io:32443" \
          --set "lagoonAPIURL=http://localhost:7070/graphql" \
          --set "keycloakAPIURL=http://localhost:8080/auth" \
          --set storageCalculator.enabled=false \
          --set sshPortal.enabled=false \
          lagoon-core \
          ./charts/lagoon-core \
        && helm upgrade \
          --install \
          --create-namespace \
          --namespace lagoon \
          --wait \
          --timeout 15m \
          --values ./charts/lagoon-remote/ci/linter-values.yaml \
          --set "rabbitMQPassword=$(kubectl -n lagoon get secret lagoon-core-broker -o json | jq -r '.data.RABBITMQ_PASSWORD | @base64d')" \
          --set "dockerHost.registry=registry.$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}').nip.io:32443" \
          lagoon-remote \
          ./charts/lagoon-remote

    - name: Fill the lagoon-test/ci/linter-values.yaml
      if: steps.lint.outputs.changed == 'true'
      run: |
        sudo apt-get install -qy gettext-base moreutils
        export ingressIP="$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}')"
        export keycloakAuthServerClientSecret="$(kubectl -n lagoon get secret lagoon-core-keycloak -o json | jq -r '.data.KEYCLOAK_AUTH_SERVER_CLIENT_SECRET | @base64d')"
        export routeSuffixHTTP="$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}').nip.io"
        export routeSuffixHTTPS="$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}').nip.io"
        export token="$(kubectl -n lagoon get secret -o json | jq -r '.items[] | select(.metadata.name | match("lagoon-build-deploy-token")) | .data.token | @base64d')"
        valueTemplate=charts/lagoon-test/ci/linter-values.yaml
        envsubst < $valueTemplate | sponge $valueTemplate

    - name: Run chart-testing (install) on lagoon-test
      uses: helm/chart-testing-action@v1.0.0
      if: steps.lint.outputs.changed == 'true'
      with:
        image: smlx/chart-testing:v3.0.0-patch.2
        command: install
        config: test-suite-run.ct.yaml
